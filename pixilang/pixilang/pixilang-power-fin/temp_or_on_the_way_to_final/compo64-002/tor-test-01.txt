start_timer(0)

FIX_MUL=65536
FIX_MUL_HALF=FIX_MUL/2

init:
width = get_window_xsize()
height = get_window_ysize()

widthd2  = width/2
heightd2 = height/2

fps_var = fps()
clear(0)
print("LOADING...",0,0, #FFFFFF)
frame

background = 0
make_bg_gradient
make_balls

make_3d_tor

i=0
i_inc=1
start_timer(1)
t1 = get_timer(1)
t_rot=0
tmr_z=0
////////////////////////////////////////////////////////////////////////////
main:
clear(0)
t = get_timer(0)
make_bg_gradient
//pixi (background,0,0,0)


if(i>=5*100) {i_inc=-i_inc}
if(i<=0) {i_inc=-i_inc}
i+i_inc
ttt=4
while (ttt>=0)
{
//pixi(balls[ttt], cos(t/15-ttt*8)/2, sin(t/15-ttt*8)/2)
ttt-1
}
//pixi(tmpbuf, -50, -50)

//print("Pixilang!", 0, 0, #ffffff)

h=0
j=0
tmr_z +1
cos_t = cos(t_rot)
sin_t = sin(t_rot)
matrix = new_array( 4 * 4 )
center_x=0
center_y=0
center_z=100

cmin = 0
cmax = 0

while(j<3*VERTEXES)
{
  x = (tor_vertexes[j])
  y = (tor_vertexes[j+1])
  z = (tor_vertexes[j+2]) // + 20*cos(tmr_z)
  //print("$x $y $z", -widthd2, -heightd2+j*3, #777777)


  //xn = (x*cos_t)-(y*sin_t)
  //yn = (x*sin_t)+(y*cos_t)
  //zn = z
  xn = x*cos_t + z*sin_t + center_x*256
  yn = y*256 + center_y*256
  zn = (-x*sin_t + z*cos_t)/256 + center_z*256


  if (zn>0)
  {
    y=yn/zn
    x=xn/zn

    dx = x
    dy = y

    c=255-zn/256
    
    if (c<cmin) {cmin=c}
    if (c>cmax) {cmax=c}
    
    dot(dx,dy, get_color(c/2,c,c/3))
    dot(dx+1,dy, get_color(c/2,c,c/3))
    dot(dx,dy+1, get_color(c/2,c,c/3))
    dot(dx+1,dy+1, get_color(c/2,c,c/3))
    //if (z=pz)
    //{
      //print("$dx $dy $zn:$c", widthd2-120, -heightd2+h, #aaaaaa)
    //}
    pz=z
    h+16
  }
  j+3
}
t1+7
t_rot+1

print("cz: [$cmin - $cmax]", widthd2-120, -heightd2, #aaaaaa)

/////////////////////////////////////////////////////////
//print( "fps: $fps_var", -widthd2, -heightd2, #000000 )
//fps_var = fps
//print( "fps: $fps_var", -widthd2, -heightd2, #FFFFFF )

frame(16)
go main


////////////////////////////////////////////////////////////////
//TODO: make pixi
make_bg_gradient:
  y=0
  while( y < heightd2 )
  {
    line (-widthd2, y, widthd2, y, get_color(sin(y),sin(y),sin(y)))
    y+1
  }
  //background = clone_pixi(0, 0)
ret

///////////////////////////
make_balls:
  size = 24
  dsize=size*2

  balls = new_array(256)
  tmpbuf = new_pixi (dsize,dsize,1)

  j=0
  x=-dsize/2
  y=-dsize/2
  set_screen(tmpbuf)
  clear(#000000)
  R = dsize
  while(R>0)
  {
    t=0
    while(t<512)
    {
      x=R*sin(t)/512
      y=R*cos(t)/512
      dot(x,y, 256-R*4)
      t=t+1
    }
    R-1
  }

  i=0
  while(i<5)
  {
    if(i>0)
    {
      tmpbuf = balls[i-1]
      set_screen(tmpbuf)
    }
    balls[i] = new_pixi(size,size,1)
    tdsize_x = get_pixi_xsize(tmpbuf)
    tdsize_y = get_pixi_ysize(tmpbuf)
    x=-tdsize_x/2
    while(x<tdsize_x/2)
    {
      y=-tdsize_y/2
      while(y<tdsize_y/2)
      {
        c = ((x+tdsize_x/2)^(y+tdsize_y/2))*2
        c1 = get_dot(x,y)
        c2 = get_dot(x+1,y)
        c3 = get_dot(x,y+1)
        c4 = get_dot(x+1,y+1)
        a  = get_blend(c1,c3,128)
        b  = get_blend(c2,c4,128)
        fc = get_blend(a,b,128)
        set_screen(balls[i])
        if (fc!=#000000)
        {dot(x/2,y/2, fc)}
        set_screen(tmpbuf)
        y=y+dsize/size
      }
      x=x+dsize/size
    }
    i+1
  }
  set_screen(0)
ret

///////////////////////
make_3d_tor:
STEP=8
VERTEXES=(512/STEP)*(512/STEP)
R=100
r=20
tor_vertexes = new_array(3*VERTEXES)
// to -> [0,pi]; tf -> [0,2pi)
tf=0
j=0
while(tf<512)
{
  to=0
  while(to<512)
  {
    x=( (R + r*cos(to) ) * cos(tf) )/256
    y=( (R + r*cos(to) ) * sin(tf) )/256
    z=r * sin(to)

    tor_vertexes[j]=x
    tor_vertexes[j+1]=y
    tor_vertexes[j+2]=z
    to+STEP
    j+3
  }
  tf+STEP
}

// ugly sort
j=0
while(j<3*VERTEXES)
{
  u=j
  while(u<3*VERTEXES)
  {
    if (tor_vertexes[j+2]>tor_vertexes[u+2])
    {
      tx = tor_vertexes[j]
      ty = tor_vertexes[j+1]
      tz = tor_vertexes[j+2]

      tor_vertexes[j]   = tor_vertexes[u]
      tor_vertexes[j+1] = tor_vertexes[u+1]
      tor_vertexes[j+2] = tor_vertexes[u+2]

      tor_vertexes[u]   = tx
      tor_vertexes[u+1] = ty
      tor_vertexes[u+2] = tz
    }
    u+3
  }
  j+3
}
ret